<!DOCTYPE html>

<html>
<head>
  <meta charset="UTF-8">
  <title>Tic Tac Toe</title>

  <style>
  body
  {
    color: #353535;
    background: linear-gradient(to bottom, #ccc, #fff 60%);
    background-repeat: no-repeat;
  }

  h1
  {
    text-align: center;
    text-decoration: underline;
    font-family:sans-serif;

  }

  td {
  	border:  2px solid #333;
  	height:  100px;
  	width:  100px;
  	text-align:  center;
  	vertical-align:  middle;
  	font-family:  "Comic Sans MS", cursive, sans-serif;
  	font-size:  70px;
  	cursor: pointer;
  }

  table {
  	border-collapse: collapse;
  	position:absolute;;
  	left: 50%;
  	margin-left: -155px;
  	top: 130px;
    background-color:white;
    background: linear-gradient(to bottom, #fff, #ddd 95%);

  }

  table tr:first-child td {
  	border-top: 0;
  }

  table tr:last-child td {
  	border-bottom: 0;
  }

  table tr td:first-child {
  	border-left: 0;
  }

  table tr td:last-child {
  	border-right: 0;
  }

  #playbutton
  {  color: #353535;
    font-size: 25px;
    margin: auto;
    display: block;
    margin-top: 430px;
  }

  #credits
  {
    margin-bottom: 2px;
    float: right;
    font-size:10px;
  }

  .endgame {
    display: none;
    width: 200px;
    top: 215px;
    background-color: rgba(205,205,205, 0.95);
    position: absolute;
    left: 50%;
    margin-left: -100px;
    padding-top: 50px;
    padding-bottom: 50px;
    text-align: center;
    border-radius: 5px;
    color: black;
    font-size: 2em;
  }



  </style>

</head>

<body>

	<table>
		<tr>
			<td class="cell" id="0"></td>
			<td class="cell" id="1"></td>
			<td class="cell" id="2"></td>
		</tr>
		<tr>
			<td class="cell" id="3"></td>
			<td class="cell" id="4"></td>
			<td class="cell" id="5"></td>
		</tr>
		<tr>
			<td class="cell" id="6"></td>
			<td class="cell" id="7"></td>
			<td class="cell" id="8"></td>
		</tr>
	</table>
	<div class="endgame">
		<div class="text">
     </div>
    </div>
    <br>
    <h1>Tic Tac Toe</h1>

	<button onClick="startGame()" id=playbutton align="center">Play again!!</button>
  <br>
  <br>
  <br>
  <p id=credits>
  <i>Thanks to FreeCodeCamp tutorial</i>
  </p>


  <script>
  var origBoard;
  const huPlayer = 'O';
  const aiPlayer = 'X';
  const winCombos = [
   [0, 1, 2],
   [3, 4, 5],
   [6, 7, 8],
   [0, 3, 6],
   [1, 4, 7],
   [2, 5, 8],
   [0, 4, 8],
   [6, 4, 2]
  ]

  const cells = document.querySelectorAll('.cell');
  startGame();

  function startGame() {
   document.querySelector(".endgame").style.display = "none";
   origBoard = Array.from(Array(9).keys());
   for (var i = 0; i < cells.length; i++) {
     cells[i].innerText = '';
     cells[i].style.removeProperty('background-color');
     cells[i].addEventListener('click', turnClick, false);
   }
  }

  function turnClick(square) {
   if (typeof origBoard[square.target.id] == 'number') {
     turn(square.target.id, huPlayer)
     if (!checkWin(origBoard, huPlayer) && !checkTie()) turn(bestSpot(), aiPlayer);
   }
  }

  function turn(squareId, player) {
   origBoard[squareId] = player;
   document.getElementById(squareId).innerText = player;
   let gameWon = checkWin(origBoard, player)
   if (gameWon) gameOver(gameWon)
  }

  function checkWin(board, player) {
   let plays = board.reduce((a, e, i) =>
     (e === player) ? a.concat(i) : a, []);
   let gameWon = null;
   for (let [index, win] of winCombos.entries()) {
     if (win.every(elem => plays.indexOf(elem) > -1)) {
       gameWon = {index: index, player: player};
       break;
     }
   }
   return gameWon;
  }

  function gameOver(gameWon) {
   for (let index of winCombos[gameWon.index]) {
     document.getElementById(index).style.backgroundColor =
       gameWon.player == huPlayer ? "blue" : "red";
   }
   for (var i = 0; i < cells.length; i++) {
     cells[i].removeEventListener('click', turnClick, false);
   }
   declareWinner(gameWon.player == huPlayer ? "YOU WIN!!!" : "YOU LOSE!!!");
  }

  function declareWinner(who) {
   document.querySelector(".endgame").style.display = "block";
   document.querySelector(".endgame .text").innerText = who;
  }

  function emptySquares() {
   return origBoard.filter(s => typeof s == 'number');
  }

  function bestSpot() {
   return minimax(origBoard, aiPlayer).index;
  }

  function checkTie() {
   if (emptySquares().length == 0) {
     for (var i = 0; i < cells.length; i++) {
       cells[i].style.backgroundColor = "white";
       cells[i].removeEventListener('click', turnClick, false);
     }
     declareWinner("Tie Game!!!")
     return true;
   }
   return false;
  }

  function minimax(newBoard, player) {
   var availSpots = emptySquares(newBoard);

   if (checkWin(newBoard, huPlayer)) {
     return {score: -10};
   } else if (checkWin(newBoard, aiPlayer)) {
     return {score: 10};
   } else if (availSpots.length === 0) {
     return {score: 0};
   }
   var moves = [];
   for (var i = 0; i < availSpots.length; i++) {
     var move = {};
     move.index = newBoard[availSpots[i]];
     newBoard[availSpots[i]] = player;

     if (player == aiPlayer) {
       var result = minimax(newBoard, huPlayer);
       move.score = result.score;
     } else {
       var result = minimax(newBoard, aiPlayer);
       move.score = result.score;
     }

     newBoard[availSpots[i]] = move.index;

     moves.push(move);
   }

   var bestMove;
   if(player === aiPlayer) {
     var bestScore = -10000;
     for(var i = 0; i < moves.length; i++) {
       if (moves[i].score > bestScore) {
         bestScore = moves[i].score;
         bestMove = i;
       }
     }
   } else {
     var bestScore = 10000;
     for(var i = 0; i < moves.length; i++) {
       if (moves[i].score < bestScore) {
         bestScore = moves[i].score;
         bestMove = i;
       }
     }
   }

   return moves[bestMove];
  }
  </script>
</body>
</html>
